from flask import Flask, request, jsonify
import boto3
import cv2
import json
import re
import os
import logging
from paddleocr import PaddleOCR
from ultralytics import YOLO
import pymysql # 추가됨

# Flask 앱 초기화
app = Flask(__name__)

# YOLO 모델 초기화 (전역 변수로 설정)
model = YOLO('yolov9c.pt')

# OCR 객체 초기화 (전역 변수로 설정)
ocr = PaddleOCR(lang="korean")

# RDS에 메타데이터 삽입 함수 - 추가됨
def insert_metadata_into_rds(metadata):
    # RDS에 연결
    connection = pymysql.connect(
        host='~',  # RDS 엔드포인트
        user='~',      # RDS 사용자 이름
        password='~',  # RDS 비밀번호
        database='~'       # 사용하려는 DB
    )
    
    try:
        with connection.cursor() as cursor:
            # SQL 삽입문
            sql = """
            INSERT INTO temporary (device_id, capture_time, latitude, longitude, image_url, plate_string)
            VALUES (%s, %s, %s, %s, %s, %s, %s);
            """
            
            # 메타데이터에서 필요한 필드를 추출하여 SQL에 삽입
            cursor.execute(sql, (
                metadata['device_id'], 
                metadata['capture_time'],
                metadata['latitude'], 
                metadata['longitude'], 
                metadata['image_url'], 
                metadata['plate_string']
            ))
            
            connection.commit()  # 변경사항을 커밋
    except Exception as e:
        print(f"Error inserting data into RDS: {e}")
    finally:
        connection.close()


# S3에서 이미지 다운로드
def download_image_from_s3(bucket_name, object_key, download_directory='/tmp'):
    s3 = boto3.client('s3')
    download_path = os.path.join(download_directory, object_key.split("/")[-1])

    try:
        s3.download_file(bucket_name, object_key, download_path)
        return download_path
    except Exception as e:
        logging.error(f"Error downloading file from S3: {e}")
        return None


# 번호판 추출 함수
def extract_plate(image_path):
    ALLOWED_OBJECTS = ['car', 'truck']

    # Load the image
    image = cv2.imread(image_path)
    if image is None:
        logging.error("Failed to load image.")
        return None

    # Perform tracking
    results = model.track(image, persist=True, verbose=False)
    detections = json.loads(results[0].tojson())

    # Initialize variables to track the highest confidence
    max_confidence = 0
    best_detection = None

    # Process detections
    for det in detections:
        if 'track_id' not in det:
            continue

        class_name = det['name']
        if class_name not in ALLOWED_OBJECTS:
            continue

        conf = det['confidence']
        if conf > max_confidence:
            max_confidence = conf
            best_detection = det

    # Check if a best detection was found
    if best_detection:
        box = best_detection['box']
        x1, y1, x2, y2 = int(box['x1']), int(box['y1']), int(box['x2']), int(box['y2'])

        # Crop the image of the vehicle with the highest confidence
        car_s = image[y1:y2, x1:x2]

        # 이미지를 OCR로 처리
        result = ocr.ocr(car_s, cls=False)

        # 결과에서 텍스트 추출
        text_result = []
        for line in result[0]:
            text_result.append(line[1][0])

        # 텍스트들을 결합
        final_result = ''.join(text_result)

        kopt = '가나다라마거너더러머고노도로모구누두루무버서어저보소오조부수우주허하호'
        pattern = re.compile(fr'\d{{2,3}}[{kopt}]\d{{4}}')
        plate = pattern.findall(final_result)

        return plate

    return None


# 메타데이터를 처리하는 라우트
@app.route('/process_metadata', methods=['POST'])
def process_metadata():
    data = request.json
    image_url = data['image_url']

    # S3 URL에서 버킷 이름과 객체 키를 추출
    if image_url.startswith('s3://'):
        bucket_name = image_url.split('/')[2]
        object_key = '/'.join(image_url.split('/')[3:])
    else:
        return jsonify({"status": "error", "message": "Invalid S3 URL format"}), 400

    # 이미지를 S3에서 다운로드
    image_path = download_image_from_s3(bucket_name, object_key)

    if image_path is not None:
        # 번호판 추출 및 처리 함수 호출
        plate = extract_plate(image_path)
        if plate: 
            data['plate_string'] = plate[0]
            metadata = data
            insert_metadata_into_rds(metadata)
            return jsonify({"status": "success", "plate": plate[0]}), 200
    else:
        return jsonify({"status": "error", "message": "Failed to download image"}), 500


if __name__ == '__main__':
    app.run(debug=True)
